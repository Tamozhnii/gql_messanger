type User {
  id: ID!
  name: String!
  email: String!
  color: String
  messages: [Message!]!
}

type AuthPayload {
  token: String
  user: User
}

type Message {
  id: ID!
  createdAt: String!
  text: String!
  postedBy: User!
}

type Feed {
  messages: [Message!]!
  total: Int!
  next: Int!
}

type Query {
  me: User!
  users(filter: String): [User!]!
  messages(filter: String, skip: Int, take: Int): Feed!
}

type Mutation {
  signup(password: String!, name: String!, email: String!): AuthPayload
  login(password: String!, email: String!): AuthPayload
  addMessage(text: String!): Message!
  removeMessage(id: ID!): Message!
  editMessage(id: ID!, text: String!): Message!
  changeProfile(name: String!, color: String!): User!
}

type Subscription {
  newMessage: Message
  removeMessage: Message
  editMessage: Message
  newUser: User
  editUser: User
}
